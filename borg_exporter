#!/usr/bin/env python3

# Borg metrics exporter for prometheus
# Reads resuls of `borg info --json ...` from stdin and writes metrics on
# stdout

import argparse
import json
import os
import platform
import sys


from prometheus_client import Gauge, generate_latest, push_to_gateway


def gen_metrics(stats):
    def get(path):
        mapping = stats
        for k in path.split("."):
            mapping = mapping[k]
        return mapping

    def gauge(path, desc, prefix="borg"):
        name = "_".join([prefix, *path.split(".")])
        value = get(path)
        Gauge(name, desc, labels.keys()).labels(**labels).set(value)

    labels = {
        "id": get("repository.id"),
        "location": get("repository.location"),
        "encryption": get("encryption.mode"),
        "hostname": platform.node(),
    }

    # available in create's output, ignore if absent
    try:
        gauge("archive.duration", "Duration of archive creation")
        gauge("archive.stats.nfiles", "Number of files in archive")
        gauge("archive.stats.original_size", "Original size of archive")
        gauge("archive.stats.compressed_size", "Compressed size of archive")
        gauge("archive.stats.deduplicated_size", "Deduplicated size of archive")
    except:
        pass

    gauge("cache.stats.total_chunks", "Repository total chunks")
    gauge("cache.stats.total_unique_chunks", "Repository unique chunks")

    gauge("cache.stats.total_size", "All archives original size")
    gauge("cache.stats.total_csize", "All archives compressed size")
    gauge("cache.stats.unique_size", "All archives deduplicated size")
    gauge("cache.stats.unique_csize", "All archives deduplicated compressed size")


if __name__ == "__main__":

    parser = argparse.ArgumentParser(prog="borg_exporter")
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-o", "--output", help="output file, `-` to write to stdout")
    group.add_argument(
        "-p",
        "--push",
        const="pushgateway:9091",
        metavar="TARGET:PORT",
        default=None,
        action="store",
        nargs="?",
        help="Push metrics to target instead of writing to a file. "
        + "If this option is used without specifying a target, "
        + "`pushgateway:9091` is used by default",
    )

    options = parser.parse_args()

    stats = json.load(sys.stdin)

    # borg outputs a json object, bormatic exports an array of borg output
    if not isinstance(stats, list):
        stats = [stats]

    for s in stats:
        gen_metrics(s)

    if options.push is not None:
        push_to_gateway(options.push, job="borg")

    else:
        metrics_bytes = generate_latest()

        output = options.output
        if output is None or output == "-":
            out = sys.stdout.buffer
        else:
            out = open(options.output, "wb")

        with out:
            out.write(metrics_bytes)
